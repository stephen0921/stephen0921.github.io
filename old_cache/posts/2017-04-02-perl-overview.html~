
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Perl coding tips</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">打开pipe或者访问文件的时候，最好使用die</h3>
<div class="outline-text-3" id="text-1-1">
<div class="highlight"><pre><span></span><span class="nb">open</span> <span class="n">FILE</span><span class="p">,</span> <span class="s">&quot;a_file&quot;</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">&quot;Can not open file a_file: $!&quot;</span><span class="p">;</span>
<span class="nb">close</span> <span class="n">FILE</span><span class="p">;</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">比die更好用的是croak</h3>
<div class="outline-text-3" id="text-1-2">
<div class="highlight"><pre><span></span><span class="k">use</span> <span class="nn">Carp</span><span class="p">;</span>
<span class="n">a</span><span class="p">(</span><span class="s">&quot;a_file&quot;</span><span class="p">);</span> <span class="c1">#resume that a_file does exist</span>
<span class="n">a</span><span class="p">(</span><span class="s">&quot;b_file&quot;</span><span class="p">);</span> <span class="c1">#resume that b_file does not exist</span>
<span class="k">sub</span> <span class="nf">a</span> <span class="p">{</span>
      <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
      <span class="nb">open</span> <span class="n">FILE</span><span class="p">,</span> <span class="s">&quot;$filename&quot;</span> <span class="ow">or</span> <span class="n">croak</span> <span class="s">&quot;Can not open file $filename: $!&quot;</span><span class="p">;</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">用dumper来print复杂的数据结构，便于debug</h3>
<div class="outline-text-3" id="text-1-3">
<div class="highlight"><pre><span></span><span class="k">use</span> <span class="nn">Data::Dumper</span><span class="p">;</span>

<span class="nv">$var</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;action&quot;</span> <span class="o">=&gt;</span> <span class="s">&quot;speak&quot;</span> <span class="p">};</span>
<span class="k">print</span> <span class="n">Dumper</span><span class="p">(</span><span class="nv">$var</span><span class="p">);</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">用grep和map可以节省很多代码</h3>
<div class="outline-text-3" id="text-1-4">
<div class="highlight"><pre><span></span><span class="k">my</span> <span class="nv">@foos</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="o">!</span><span class="sr">/^#/</span><span class="p">}</span> <span class="nv">@bars</span><span class="p">;</span>    <span class="c1"># weed out comments</span>

<span class="k">my</span> <span class="nv">%hash</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span>  <span class="nb">lc</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="mi">1</span>  <span class="p">}</span> <span class="nv">@array</span>

<span class="k">my</span> <span class="nv">@squares</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="nv">$_</span> <span class="o">*</span> <span class="nv">$_</span> <span class="p">}</span> <span class="nb">grep</span> <span class="p">{</span> <span class="nv">$_</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="p">}</span> <span class="nv">@numbers</span><span class="p">;</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">使用qq代替双引号，使用q代替单引号，list赋值使用qw</h3>
<div class="outline-text-3" id="text-1-5">
<div class="highlight"><pre><span></span><span class="nv">$a</span> <span class="o">=</span> <span class="sx">qq{&quot;}</span><span class="p">;</span> <span class="c1">#{} is used for boundary</span>
<span class="nv">$b</span> <span class="o">=</span> <span class="sx">qq!&quot;!</span><span class="p">;</span> <span class="c1">#!! is the same</span>

<span class="nv">$c</span> <span class="o">=</span> <span class="sx">q{&#39;}</span><span class="p">;</span>
<span class="nv">@vars</span> <span class="o">=</span> <span class="sx">qw{a b c}</span><span class="p">;</span>
</pre></div>
</div>
</div>


<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">使用list的内置函数，不要重新发明轮子</h3>
<div class="outline-text-3" id="text-1-6">
<div class="highlight"><pre><span></span><span class="k">use</span> <span class="nn">List::Util</span> <span class="sx">qw(max)</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@vars</span> <span class="o">=</span> <span class="sx">qw(1 2 3)</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$result</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="nv">@vars</span><span class="p">);</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-7" class="outline-3">
<h3 id="sec-1-7">打印多行的信息</h3>
<div class="outline-text-3" id="text-1-7">
<div class="highlight"><pre><span></span><span class="nv">$a</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="p">;</span>
<span class="k">print</span> <span class="s">&lt;&lt;</span><span class="dl">ENDOFPRINT</span><span class="s">;</span>
<span class="s">Dear Lee,</span>
<span class="s">    blablabla...</span>
<span class="s">    $a</span>
<span class="dl">ENDOFPRINT</span>

<span class="nv">$b</span> <span class="o">=</span> <span class="s">&lt;&lt;</span><span class="dl">ENDOFA</span><span class="s">;</span>
<span class="s">Dear friend,</span>
<span class="s">   I am here.</span>
<span class="dl">ENDOFA</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-8" class="outline-3">
<h3 id="sec-1-8">只想做语法检查</h3>
<div class="outline-text-3" id="text-1-8">
<div class="highlight"><pre><span></span>perl -cwT test.pl
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-9" class="outline-3">
<h3 id="sec-1-9">查看Perl默认的include路径</h3>
<div class="outline-text-3" id="text-1-9">
<div class="highlight"><pre><span></span>perl -e <span class="s2">&quot;print join(qq{\n}, @INC);&quot;</span>
</pre></div>
</div>
</div>


<div id="outline-container-sec-1-10" class="outline-3">
<h3 id="sec-1-10">使用自己的local路径下的库</h3>
<div class="outline-text-3" id="text-1-10">
<div class="highlight"><pre><span></span><span class="k">use</span> <span class="nn">lib</span> <span class="s">&#39;/home/xx/eda_scripts/pm&#39;</span><span class="p">;</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-11" class="outline-3">
<h3 id="sec-1-11">查看perl的pod格式的说明</h3>
<div class="outline-text-3" id="text-1-11">
<div class="highlight"><pre><span></span>perldoc rvp.pm
perldoc perldoc
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-12" class="outline-3">
<h3 id="sec-1-12">Perl5.8之后的版本，可以在数据中间加下划线</h3>
<div class="outline-text-3" id="text-1-12">
<div class="highlight"><pre><span></span><span class="nv">$a</span> <span class="o">=</span> <span class="mi">111_222</span><span class="p">;</span>
<span class="k">print</span> <span class="s">&quot;a = &quot;</span><span class="p">,</span> <span class="nv">$a</span> <span class="p">,</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-13" class="outline-3">
<h3 id="sec-1-13">调用其他shell命令，同时获得shell命令的STDERR以及STDOUT信息</h3>
<div class="outline-text-3" id="text-1-13">
<div class="highlight"><pre><span></span><span class="nv">$pid</span> <span class="o">=</span> <span class="nb">open</span> <span class="nv">$readme</span><span class="p">,</span> <span class="s">&quot;-|&quot;</span><span class="p">,</span> <span class="s">&quot;$cmd 2&gt;&amp;1&quot;</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="sr">&lt;$readme&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">push</span><span class="p">(</span><span class="nv">@out</span><span class="p">,</span> <span class="nv">$_</span><span class="p">);</span>
<span class="p">}</span>
<span class="nb">close</span> <span class="nv">$readme</span><span class="p">;</span>
</pre></div>
</div>
</div>


<div id="outline-container-sec-1-14" class="outline-3">
<h3 id="sec-1-14">Perl使用子线程，获得子线程的STDERR信息</h3>
<div class="outline-text-3" id="text-1-14">
<div class="highlight"><pre><span></span><span class="nb">pipe</span><span class="p">(</span><span class="n">READER</span><span class="p">,</span> <span class="n">WRITER</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">&quot;pipe no good: $!&quot;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$pid</span> <span class="o">=</span> <span class="nb">fork</span><span class="p">();</span>
<span class="nb">die</span> <span class="s">&quot;Can no fork: $!&quot;</span> <span class="k">unless</span> <span class="nb">defined</span> <span class="nv">$pid</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span><span class="nv">$pid</span><span class="p">)</span> <span class="p">{</span> <span class="c1">#parent process</span>
    <span class="nb">close</span> <span class="n">WRITER</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="sr">&lt;READER&gt;</span><span class="p">)</span> <span class="p">{</span>
	<span class="nb">push</span> <span class="nv">@out</span><span class="p">,</span> <span class="nv">$_</span><span class="p">;</span>
    <span class="p">}</span>    
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span> <span class="c1">#child process</span>
    <span class="nb">close</span> <span class="n">READER</span><span class="p">;</span>
    <span class="nb">open</span> <span class="bp">STDERR</span><span class="p">,</span> <span class="s">&quot;&gt;&amp;WRITER&quot;</span><span class="p">;</span>
    <span class="nv">$parser</span> <span class="o">=</span> <span class="nn">XML::LibXML</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
    <span class="nv">$parser</span><span class="o">-&gt;</span><span class="n">validation</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="nb">exit</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-15" class="outline-3">
<h3 id="sec-1-15">多线程</h3>
<div class="outline-text-3" id="text-1-15">
</div><div id="outline-container-sec-1-15-1" class="outline-4">
<h4 id="sec-1-15-1">因为fork是复制出一个完全一样的进程，所以“go on”会被print 2 次。</h4>
<div class="outline-text-4" id="text-1-15-1">
<div class="highlight"><pre><span></span><span class="k">my</span> <span class="nv">$pid</span> <span class="o">=</span> <span class="nb">fork</span><span class="p">();</span>
<span class="k">if</span><span class="p">(</span><span class="nv">$pid</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">#parent</span>
    <span class="k">print</span> <span class="s">&quot;in parent\n&quot;</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
    <span class="c1">#child</span>
    <span class="k">print</span> <span class="s">&quot;in child\n&quot;</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">print</span> <span class="s">&quot;go on\n&quot;</span><span class="p">;</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-15-2" class="outline-4">
<h4 id="sec-1-15-2">child process中途退出了，所以 “go on”只被print 1次</h4>
<div class="outline-text-4" id="text-1-15-2">
<div class="highlight"><pre><span></span><span class="k">my</span> <span class="nv">$pid</span> <span class="o">=</span> <span class="nb">fork</span><span class="p">();</span>
<span class="k">if</span><span class="p">(</span><span class="nv">$pid</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">#parent</span>
    <span class="k">print</span> <span class="s">&quot;in parent\n&quot;</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
    <span class="c1">#child</span>
    <span class="k">print</span> <span class="s">&quot;in child\n&quot;</span><span class="p">;</span>
    <span class="nb">exit</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">print</span> <span class="s">&quot;go on\n&quot;</span><span class="p">;</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-15-3" class="outline-4">
<h4 id="sec-1-15-3">child process通过exec，替换掉当前process，所以 “never print this”不会被print</h4>
<div class="outline-text-4" id="text-1-15-3">
<div class="highlight"><pre><span></span><span class="k">my</span> <span class="nv">$pid</span> <span class="o">=</span> <span class="nb">fork</span><span class="p">();</span>

<span class="k">if</span><span class="p">(</span><span class="nv">$pid</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">#parent</span>
    <span class="k">print</span> <span class="s">&quot;in parent\n&quot;</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
    <span class="c1">#child</span>
    <span class="k">print</span> <span class="s">&quot;in child\n&quot;</span><span class="p">;</span>
    <span class="nb">exec</span><span class="p">(</span><span class="s">&quot;ls&quot;</span><span class="p">);</span>
    <span class="k">print</span> <span class="s">&quot;never print this.\n&quot;</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">print</span> <span class="s">&quot;go on\n&quot;</span><span class="p">;</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-15-4" class="outline-4">
<h4 id="sec-1-15-4">eval{}是一种保护性写法。eval的运行结果放在$@里。可以结合alarm handler来完成很多应用</h4>
<div class="outline-text-4" id="text-1-15-4">
<div class="highlight"><pre><span></span><span class="k">print</span> <span class="bp">STDERR</span> <span class="s">&quot;type your password: &quot;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$password</span> <span class="o">=</span>
<span class="nb">eval</span> <span class="p">{</span>
<span class="nb">local</span> <span class="nv">$SIG</span><span class="p">{</span><span class="n">ALRM</span><span class="p">}</span> <span class="o">=</span> <span class="k">sub</span> <span class="p">{</span> <span class="nb">die</span> <span class="s">&quot;timeout\n&quot;</span> <span class="p">};</span>
<span class="nb">alarm</span> <span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1"># five second timeout</span>
<span class="k">return</span> <span class="sr">&lt;STDIN&gt;</span><span class="p">;</span>
<span class="p">};</span>
<span class="nb">alarm</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="k">print</span> <span class="bp">STDERR</span> <span class="s">&quot;you timed out\n&quot;</span> <span class="k">if</span> <span class="vg">$@</span> <span class="o">=~</span><span class="sr"> /timeout/</span><span class="p">;</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-15-5" class="outline-4">
<h4 id="sec-1-15-5">reaper函数，非阻塞式（WNOHANG）的处理所有子进程，$kid等于-1的时候，表示没有需要回收的进程，跳出reaper函数</h4>
<div class="outline-text-4" id="text-1-15-5">
<div class="highlight"><pre><span></span><span class="k">use</span> <span class="nn">POSIX</span> <span class="s">&#39;WNOHANG&#39;</span><span class="p">;</span>
<span class="nv">$SIG</span><span class="p">{</span><span class="n">CHLD</span><span class="p">}</span> <span class="o">=</span> <span class="o">\&amp;</span><span class="n">reaper</span><span class="p">;</span>
<span class="k">sub</span> <span class="nf">reaper</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="k">my</span> <span class="nv">$kid</span> <span class="o">=</span> <span class="nb">waitpid</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">WNOHANG</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">warn</span> <span class="s">&quot;Reaped child with PID $kid\n&quot;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>

<div id="outline-container-sec-1-16" class="outline-3">
<h3 id="sec-1-16">reference</h3>
<div class="outline-text-3" id="text-1-16">
<p>
类似c语言的指针
</p>

<div class="highlight"><pre><span></span><span class="nv">@vars</span> <span class="o">=</span> <span class="p">();</span>
<span class="nv">$vars_ref</span> <span class="o">=</span> <span class="o">\</span><span class="nv">@vars</span><span class="p">;</span>

<span class="nv">$a_href</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nv">$b_href</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;action&quot;</span> <span class="o">=&gt;</span> <span class="s">&quot;speak&quot;</span><span class="p">,</span> <span class="p">};</span>
<span class="nv">$c_href</span> <span class="o">=</span> <span class="p">{</span><span class="nv">%</span><span class="p">{</span><span class="nv">$b_href</span><span class="p">}};</span>


<span class="nv">$tmp</span> <span class="o">=</span> <span class="s">&quot;name&quot;</span><span class="p">;</span>
<span class="k">print</span> <span class="nv">$c_href</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tmp</span><span class="p">},</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span> <span class="c1">#This is called a symbolic reference</span>
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-17" class="outline-3">
<h3 id="sec-1-17">安装module</h3>
<div class="outline-text-3" id="text-1-17">
<div class="highlight"><pre><span></span>cpan install Template
cpan install XML::Rabbit
</pre></div>
</div>
</div>

<div id="outline-container-sec-1-18" class="outline-3">
<h3 id="sec-1-18">好用的module</h3>
<div class="outline-text-3" id="text-1-18">
<p>
<a href="http://template-toolkit.org/docs/">Template Toolkit</a>
</p>

<p>
<a href="http://search.cpan.org/~shlomif/XML-LibXML-2.0125/LibXML.pod">XML::LibXML</a>
</p>


<p>
<a href="http://search.cpan.org/~robins/XML-Rabbit-0.4.1/lib/XML/Rabbit.pm">XML::Rabbit</a>
</p>

<p>
<a href="http://www.burbleland.com/v2html/rvp.html">rvp</a>
</p>

<p>
<a href="http://search.cpan.org/~neilb/Smart-Comments-1.06/lib/Smart/Comments.pm">Smart::Comments</a>
</p>

<p>
<a href="http://search.cpan.org/~ether/Moose-2.1802/lib/Moose.pm">Moose</a>
</p>
</div>
</div>


<div id="outline-container-sec-1-19" class="outline-3">
<h3 id="sec-1-19">Perl 在验证中的应用</h3>
<div class="outline-text-3" id="text-1-19">
<p>
<a href="http://www.doulos.com/content/events/easierUVM.php">easier UVM</a>
</p>
</div>
</div>

<div id="outline-container-sec-1-20" class="outline-3">
<h3 id="sec-1-20">Perl 参考网站</h3>
<div class="outline-text-3" id="text-1-20">
<p>
<a href="http://perldoc.perl.org/">perldoc</a>
</p>

<p>
<a href="http://search.cpan.org/">cpan</a>
</p>
</div>
</div>
</div>
