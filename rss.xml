<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yao He's Awesome Site</title><link>https://stephen0921.github.io/</link><description>Some tips and notes need to write here.</description><atom:link href="https://stephen0921.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:stephen0921@gmail.com"&gt;Yao He&lt;/a&gt; </copyright><lastBuildDate>Sun, 15 Jul 2018 14:07:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>I am back</title><link>https://stephen0921.github.io/posts/test/</link><dc:creator>Yao He</dc:creator><description>&lt;p&gt;
Long time no see.
&lt;/p&gt;</description><category>perl</category><guid>https://stephen0921.github.io/posts/test/</guid><pubDate>Sun, 15 Jul 2018 11:14:08 GMT</pubDate></item><item><title>Install Perl Module without Root Priviledge</title><link>https://stephen0921.github.io/posts/install-perl-module-without-root-priviledge/</link><dc:creator>Yao He</dc:creator><description>&lt;p&gt;
当没有root权限但是又想要安装一个module的时候，可以通过编译module源码的方式来实现.
比如我想要安装template-toolkit, 那么我就去&lt;a href="http://www.template-toolkit.org/download/index.html"&gt;官网&lt;/a&gt; 下载源码.
然后在terminal中依次执行以下命令.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar zxf Template-Toolkit-2.26.tar.gz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; Template-Toolkit-2.26
$ perl Makefile.PL &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/user/test/local/perl
$ make
$ make &lt;span class="nb"&gt;test&lt;/span&gt;
$ make install
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
然后在自己的perl文件中，加上一条:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;lib&lt;/span&gt; &lt;span class="s"&gt;"/Users/user/test/local/perl/lib/perl5/site_perl/5.18.2/darwin-thread-multi-2level"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
这样就可以使用我们新安装的module了。
&lt;/p&gt;</description><category>perl</category><guid>https://stephen0921.github.io/posts/install-perl-module-without-root-priviledge/</guid><pubDate>Wed, 21 Feb 2018 11:14:08 GMT</pubDate></item><item><title>Autoinst</title><link>https://stephen0921.github.io/posts/autoinst/</link><dc:creator>Yao He</dc:creator><description>&lt;p&gt;
verilog中的模块例化等快捷操作，在Emacs中的verilog-mode下，非常强大和方便。让非Emacs用户也可以享受到它的便利，需要做一下小小的包装。这个包装脚本很简单，等下周一给同事们推广一下，看看效果反馈。
&lt;/p&gt;</description><category>emacs</category><guid>https://stephen0921.github.io/posts/autoinst/</guid><pubDate>Sat, 03 Feb 2018 07:57:16 GMT</pubDate></item><item><title>hello, 2018</title><link>https://stephen0921.github.io/posts/hello-2018/</link><dc:creator>Yao He</dc:creator><description>&lt;p&gt;
转眼2018年了，也不知道要写点啥了.
&lt;/p&gt;</description><guid>https://stephen0921.github.io/posts/hello-2018/</guid><pubDate>Sat, 27 Jan 2018 03:09:33 GMT</pubDate></item><item><title>Tmux Introduction III</title><link>https://stephen0921.github.io/posts/2017-12-09-tmux-part3/</link><dc:creator>Yao He</dc:creator><description>&lt;p&gt;
结合到自己的工作流程中.
比如我有一个shell脚本针对我的某一个项目的工作, 它帮我预先配置好环境.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c1"&gt;# 判断后台是否已经有名为bba的session&lt;/span&gt;
tmux has-session -t bba
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# 如果没有, 那么建立这个session&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="c1"&gt;# 建立一个名为bba的session, 同时window名为editor&lt;/span&gt;
  tmux new-session -s bba -n editor -d
  &lt;span class="c1"&gt;# 预先输入一组命令, 提供工作效率, C-m表示回车键&lt;/span&gt;
  tmux send-keys -t bba &lt;span class="s1"&gt;'newgrp kobra'&lt;/span&gt; C-m
  tmux send-keys -t bba &lt;span class="s1"&gt;'cd /vobs/fpga/cobra'&lt;/span&gt; C-m
  tmux send-keys -t bba &lt;span class="s1"&gt;'ct setview ezyaohe_1'&lt;/span&gt; C-m
  tmux send-keys -t bba &lt;span class="s1"&gt;'module add cobra/3.1'&lt;/span&gt; C-m
  tmux send-keys -t bba &lt;span class="s1"&gt;'emacs'&lt;/span&gt; C-m
  &lt;span class="c1"&gt;# 竖直拆分成2个panes&lt;/span&gt;
  tmux split-window -v -t bba
  &lt;span class="c1"&gt;# 选择一个布局样式&lt;/span&gt;
  tmux &lt;span class="k"&gt;select&lt;/span&gt;-layout -t bba main-horizontal
  &lt;span class="c1"&gt;# 向第二个pane里输入一组命令，类似于上面的&lt;/span&gt;
  tmux send-keys -t bba:1.2 &lt;span class="s1"&gt;'newgrp kobra'&lt;/span&gt; C-m
  tmux send-keys -t bba:1.2 &lt;span class="s1"&gt;'cd /vobs/fpga/cobra'&lt;/span&gt; C-m
  tmux send-keys -t bba:1.2 &lt;span class="s1"&gt;'ct setview ezyaohe_1'&lt;/span&gt; C-m
  tmux send-keys -t bba:1.2 &lt;span class="s1"&gt;'module add cobra/3.1'&lt;/span&gt; C-m
  &lt;span class="c1"&gt;# 新开一个window，名为console&lt;/span&gt;
  tmux new-window -n console -t bba
  &lt;span class="c1"&gt;# 向第二个window中输入一组命令&lt;/span&gt;
  tmux send-keys -t bba:2 &lt;span class="s1"&gt;'newgrp kobra'&lt;/span&gt; C-m
  tmux send-keys -t bba:2 &lt;span class="s1"&gt;'cd /vobs/fpga/cobra'&lt;/span&gt; C-m
  tmux send-keys -t bba:2 &lt;span class="s1"&gt;'ct setview ezyaohe_1'&lt;/span&gt; C-m
  tmux send-keys -t bba:2 &lt;span class="s1"&gt;'module add cobra/3.1'&lt;/span&gt; C-m
  tmux send-keys -t bba:2 &lt;span class="s1"&gt;'cd /proj/cobra/verif/ezyaohe'&lt;/span&gt; C-m
  &lt;span class="c1"&gt;# 光标回到第一个window&lt;/span&gt;
  tmux &lt;span class="k"&gt;select&lt;/span&gt;-window -t bba:1
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="c1"&gt;# 连接bba这个session&lt;/span&gt;
tmux attach -t bba
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/tmuxworkflow.png" class="img-thumbnail" width="90%" &amp;gt;
&lt;/p&gt;

&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-12-09-tmux-part3/</guid><pubDate>Sat, 09 Dec 2017 03:32:32 GMT</pubDate></item><item><title>Tmux Introduction II</title><link>https://stephen0921.github.io/posts/2017-12-09-tmux-part2/</link><dc:creator>Yao He</dc:creator><description>&lt;p&gt;
定制我们的Tmux.
&lt;/p&gt;

&lt;p&gt;
启动Tmux时，会自动去source ~/.tmux.conf文件. 
&lt;/p&gt;

&lt;p&gt;
先来看看我的.tmux.conf文件内容.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# It is for tmux-2.4&lt;/span&gt;
&lt;span class="c1"&gt;# Set the base index for windows to 1 instead of 0&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -g base-index &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# Set the base index for panes to 1 instead of 0&lt;/span&gt;
setw -g pane-base-index &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# Reload the file with Prefix r&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; r source-file ~/.tmux.conf &lt;span class="se"&gt;\;&lt;/span&gt; display &lt;span class="s2"&gt;"Reloaded!"&lt;/span&gt;
&lt;span class="c1"&gt;# splitting panes&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; split-window -h
&lt;span class="nb"&gt;bind&lt;/span&gt; - split-window -v
&lt;span class="c1"&gt;# moving between panes&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; h &lt;span class="k"&gt;select&lt;/span&gt;-pane -L
&lt;span class="nb"&gt;bind&lt;/span&gt; j &lt;span class="k"&gt;select&lt;/span&gt;-pane -D
&lt;span class="nb"&gt;bind&lt;/span&gt; k &lt;span class="k"&gt;select&lt;/span&gt;-pane -U
&lt;span class="nb"&gt;bind&lt;/span&gt; l &lt;span class="k"&gt;select&lt;/span&gt;-pane -R
&lt;span class="c1"&gt;# Pane resizing&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; -r H resize-pane -L &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; -r J resize-pane -D &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; -r K resize-pane -U &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; -r L resize-pane -R &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;# Set the default terminal mode to 256color mode&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -g default-terminal &lt;span class="s2"&gt;"screen-256color"&lt;/span&gt;
&lt;span class="c1"&gt;# set the status line's colors&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -g status-fg white
&lt;span class="nb"&gt;set&lt;/span&gt; -g status-bg black
&lt;span class="c1"&gt;# set the color of the window list&lt;/span&gt;
setw -g window-status-fg cyan
setw -g window-status-bg default
setw -g window-status-attr dim
&lt;span class="c1"&gt;# set colors for the active window&lt;/span&gt;
setw -g window-status-current-fg white
setw -g window-status-current-bg red
setw -g window-status-current-attr bright
&lt;span class="c1"&gt;# pane colors&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -g pane-border-fg green
&lt;span class="nb"&gt;set&lt;/span&gt; -g pane-border-bg black
&lt;span class="nb"&gt;set&lt;/span&gt; -g pane-active-border-fg white
&lt;span class="nb"&gt;set&lt;/span&gt; -g pane-active-border-bg yellow
&lt;span class="c1"&gt;# Command / message line&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -g message-fg white
&lt;span class="nb"&gt;set&lt;/span&gt; -g message-bg black
&lt;span class="nb"&gt;set&lt;/span&gt; -g message-attr bright
&lt;span class="c1"&gt;# Status line left side&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -g status-left-length &lt;span class="m"&gt;40&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -g status-left &lt;span class="s2"&gt;"#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"&lt;/span&gt;
&lt;span class="c1"&gt;# Update the status bar every sixty seconds&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -g status-interval &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="c1"&gt;# Center the window list&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -g status-justify centre
&lt;span class="c1"&gt;# Mouse support&lt;/span&gt;
set-option -g mouse on
&lt;span class="c1"&gt;# Move like vi&lt;/span&gt;
setw -g mode-keys vi
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
上一篇介绍提到buffer模式中的移动以及复制, 当我们用命令"setw -g mode-keys vi"时，我们在buffer模式移动时就和vi一样了, 比如"gg"到buffer首端, "G"到buffer末端, 空格开始选择要copy的部分, 回车退出copy部分的选择, "prefix ]"是黏贴.
&lt;/p&gt;

&lt;p&gt;
调整好了再看看tmux的样式.
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/tmuxconf.png" class="img-thumbnail" width="90%" &amp;gt;
&lt;/p&gt;

&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-12-09-tmux-part2/</guid><pubDate>Sat, 09 Dec 2017 03:11:32 GMT</pubDate></item><item><title>Tmux Introduction I</title><link>https://stephen0921.github.io/posts/2017-12-06-tmux-part1/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-org53f476c" class="outline-2"&gt;
&lt;h2 id="org53f476c"&gt;什么是Tmux?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org53f476c"&gt;
&lt;p&gt;
Tmux可以理解为是一个terminal控制器, 是对我们的terminal的扩展, 同时我们可以利用它来建立自己的一套workflow.
&lt;/p&gt;

&lt;p&gt;
先上一张图,感受一下.
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/tmux.png" class="img-thumbnail" width="90%" &amp;gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
Terminal的上半部分是打开了vim准备编辑, 下半部分竖直拆分成2个部分.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga23646f" class="outline-2"&gt;
&lt;h2 id="orga23646f"&gt;为什么要用Tmux?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga23646f"&gt;
&lt;p&gt;
原因一, 在一个Terminal上实现了多窗口控制,便于写代码同时调试;
&lt;/p&gt;

&lt;p&gt;
原因二, Tmux为我们在后台保存了一个进程, 记录了我们当前的窗口状态, 即使关闭这个Terminal, 只要下次再打开Tmux,立刻恢复退出前的状态.
&lt;/p&gt;

&lt;p&gt;
原因三, 我们可以给Tmux提供一组配置文件, 这样可以在每次建立窗口前, 预先设置好环境, 提高了工作效率.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org05bf749" class="outline-2"&gt;
&lt;h2 id="org05bf749"&gt;怎么用Tmux?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org05bf749"&gt;
&lt;p&gt;
首先,先建立一个Tmux进程, 这里有专门的术语session.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tmux new -s abc
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
我们通过上面的命令得到了一个Tmux session,名字叫abc.
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/newsession.png" class="img-thumbnail" width="90%" &amp;gt;          
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
这个时候Terminal底部的绿色状态栏提示我们,目前是在一个Tmux的session中.现在我们就可以做一些分割窗口的操作了.Tmux的所有命令都有同样的一个前缀,就是"ctrl-b"&lt;sup&gt;&lt;a id="fnr.1" class="footref" href="https://stephen0921.github.io/posts/2017-12-06-tmux-part1/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;. 我们按"ctrl-b", 然后按"%", 为了便于说明我用"prefix %"来表示. Terminal就被竖直分成了两个部分.这每一部分称为pane.在pane之间来回移动光标的命令是"prefix o"&lt;sup&gt;&lt;a id="fnr.2" class="footref" href="https://stephen0921.github.io/posts/2017-12-06-tmux-part1/#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/split.png" class="img-thumbnail" width="90%" &amp;gt;          
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
我们先断开session连接, 命令是"prefix d".
&lt;/p&gt;

&lt;p&gt;
然后在terminal中输入命令，来查看后台有哪些Tmux的session.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tmux ls
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
结果显示如下, 有一个Tmux后台进程, session名为abc.
&lt;/p&gt;
&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/tmuxls.png" class="img-thumbnail" width="90%" &amp;gt;          
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
我们再通过下面的命令,重新连接到session abc去.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tmux attach -t abc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org720a7e9" class="outline-2"&gt;
&lt;h2 id="org720a7e9"&gt;window概念&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org720a7e9"&gt;
&lt;p&gt;
连接或者新打开一个session, 我们就得到了一个window. window可以被拆成若干pane.
新建一个window的快捷键是"prefix c", 关闭一个window的快捷键是"prefix &amp;amp;".
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd5e3c0c" class="outline-2"&gt;
&lt;h2 id="orgd5e3c0c"&gt;buffer概念&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd5e3c0c"&gt;
&lt;p&gt;
当我们想copy terminal显示的内容时, 我们需要进入buffer模式, 快捷键是"prefix [".
&lt;/p&gt;

&lt;p&gt;
在buffer中移动以及其他操作我们留在下一篇介绍里说.
&lt;/p&gt;

&lt;p&gt;
在非buffer模式, 如果想paste内容, 快捷键是"prefix ]".
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/tmuxbuf.png" class="img-thumbnail" width="90%" &amp;gt;   
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
注意右上脚的行号显示, 表示我们现在是buffer模式. (按"q"退出buffer模式)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="https://stephen0921.github.io/posts/2017-12-06-tmux-part1/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
"-"表示两个键同时按.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="https://stephen0921.github.io/posts/2017-12-06-tmux-part1/#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
" "表示按键依次按.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-12-06-tmux-part1/</guid><pubDate>Wed, 06 Dec 2017 14:35:32 GMT</pubDate></item><item><title>Emacs column edit</title><link>https://stephen0921.github.io/posts/2017-10-31-emacs-rectangle/</link><dc:creator>Yao He</dc:creator><description>&lt;p&gt;
以前一直觉得emacs的列操作不如vim好用，经过最近一段时间的深入使用，让我的看法有所改变。比如下面的代码我想多加4组agent，那么怎么做呢？
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;agent0 u_agent_0(.clk1(clk),.rst1(rst));
agent1 u_agent_1(.clk1(clk),.rst1(rst));
agent2 u_agent_2(.clk1(clk),.rst1(rst));
agent3 u_agent_3(.clk1(clk),.rst1(rst));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
先copy四行出来。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;agent0 u_agent_0(.clk1(clk),.rst1(rst));
agent1 u_agent_1(.clk1(clk),.rst1(rst));
agent2 u_agent_2(.clk1(clk),.rst1(rst));
agent3 u_agent_3(.clk1(clk),.rst1(rst));

// the 4 lines below are copied from above
agent0 u_agent_0(.clk1(clk),.rst1(rst));
agent1 u_agent_1(.clk1(clk),.rst1(rst));
agent2 u_agent_2(.clk1(clk),.rst1(rst));
agent3 u_agent_3(.clk1(clk),.rst1(rst));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
然后，先选中要修改的4行，然后M-C-%(或者M-x，键入query-replace-regexp, 回车)，在mini-buffer中输入被替换的表达式是
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;-9&lt;span class="o"&gt;]&lt;/span&gt;+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
目标表达式是 
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="se"&gt;\,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;+ &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="se"&gt;\#&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
然后回车，就有一个交互式提示，想要替换掉的，按y，不想替换的按n，如果想全部替换的话，按！,具体命令可以按？来查询。
如图所示。
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/emacs.PNG" class="img-thumbnail" width="60%" &amp;gt;          
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
经过4轮的"yynn"后就得到了下面的代码。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;agent0 u_agent_0(.clk1(clk),.rst1(rst));
agent1 u_agent_1(.clk1(clk),.rst1(rst));
agent2 u_agent_2(.clk1(clk),.rst1(rst));
agent3 u_agent_3(.clk1(clk),.rst1(rst));

// the 4 lines below are copied from above, then replace
agent4 u_agent_4(.clk1(clk),.rst1(rst));
agent5 u_agent_5(.clk1(clk),.rst1(rst));
agent6 u_agent_6(.clk1(clk),.rst1(rst));
agent7 u_agent_7(.clk1(clk),.rst1(rst));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
这个过程略显复杂，如果是emacs版本25.2的话，就可以使用(rectangle-mark-mode)来单独选中要改变的列，然后整体替换就ok了。
如下图所示。
&lt;/p&gt;
&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/emacs-rect.PNG" class="img-thumbnail" width="60%" &amp;gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/emacs-rect-2.PNG" class="img-thumbnail" width="60%" &amp;gt;
&lt;/p&gt;

&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-10-31-emacs-rectangle/</guid><pubDate>Tue, 31 Oct 2017 10:35:32 GMT</pubDate></item><item><title>Use Openxmlformat to Generate WORD DOC</title><link>https://stephen0921.github.io/posts/2017-09-22-openxmlformat/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-org3314c38" class="outline-2"&gt;
&lt;h2 id="org3314c38"&gt;Generating MS-WORD doc using openxmlformat&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3314c38"&gt;
&lt;p&gt;
使用openxmlformat格式来描述，可以用WORD打开的xml文档。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-09-22-openxmlformat/</guid><pubDate>Fri, 22 Sep 2017 03:55:32 GMT</pubDate></item><item><title>Generate Tags for Emacs by Verdi</title><link>https://stephen0921.github.io/posts/2017-09-12-emacs-tags-verdi/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-org9fd8f90" class="outline-2"&gt;
&lt;h2 id="org9fd8f90"&gt;Generate Tags for Emacs by Verdi&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9fd8f90"&gt;
&lt;p&gt;
无意中看到SNUG的一个文章，作者通过使用Verdi来生成Emacs以及Vim的tags文件，很棒。我一直没有找到特别好的办法来用Emacs浏览verilog 代码工程，之前也是使用Emacs的插件projectile来grep关键字。我赶紧按照作者的描述操作起来了。
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/tags.png" class="img-thumbnail" width="60%" &amp;gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
作者的tcl脚本是放在&lt;a href="https://www.vc-apps.org/sitepages/downloadList.aspx"&gt;这里的&lt;/a&gt; ，居然排在第一个。
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/vcc.PNG" class="img-thumbnail" width="60%" &amp;gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
在Verdi打开tcl命令窗口，然后source下载的tcl脚本。
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/verdi.PNG" class="img-thumbnail" width="60%" &amp;gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
生成的vim版本的tags文件是ok的，能用。Emacs版本的TAGS文件居然不能跳转！
&lt;/p&gt;

&lt;p&gt;
仔细查了一遍，应该是作者把emacs tags文件的格式弄错了，看来作者一定是vim用户了，或者我使用的emacs版本（25.2）太高了？
&lt;/p&gt;

&lt;p&gt;
再看了一遍论文，作者文字描述的格式和他实际脚本生成的TAGS格式不一致，把tag_definition_text丢掉了，所以跳转有问题。
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/emacs_tags_format.png" class="img-thumbnail" width="60%" &amp;gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
去&lt;a href="https://www.vc-apps.org/sitepages/gettingstarted.aspx"&gt;官网&lt;/a&gt;查到了npi参考手册，fix一下tcl代码。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt; tagInfo&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$sorted_ident&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; srcFile &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;lindex&lt;/span&gt; &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="nv"&gt;$tagInfo&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$srcFile&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;set&lt;/span&gt; tag &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;lindex&lt;/span&gt; &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="nv"&gt;$tagInfo&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;set&lt;/span&gt; line &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;lindex&lt;/span&gt; &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="nv"&gt;$tagInfo&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;set&lt;/span&gt; offset &lt;span class="nv"&gt;$byteCounts&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

      &lt;span class="c"&gt;#======= fix by yaohe begin ===========#&lt;/span&gt;
	&lt;span class="c"&gt;#set entry "\x7f$tag\x01,$offset"&lt;/span&gt;
	&lt;span class="k"&gt;set&lt;/span&gt; file_hdl &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;npi_text_file_by_name&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;name &lt;span class="s2"&gt;"$srcFile"&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
	&lt;span class="k"&gt;set&lt;/span&gt; line_hdl &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;npi_text_line_by_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;ref &lt;span class="nv"&gt;$file_hdl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;number &lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
	&lt;span class="k"&gt;set&lt;/span&gt; line_content &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;npi_text_property_str&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;type npiTextLineContent &lt;span class="o"&gt;-&lt;/span&gt;ref &lt;span class="nv"&gt;$line_hdl&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
	&lt;span class="nb"&gt;regsub&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$line_content&lt;/span&gt; &lt;span class="k"&gt;{}&lt;/span&gt; line_content
	&lt;span class="k"&gt;set&lt;/span&gt; entry &lt;span class="s2"&gt;"$line_content\x7f$line,$offset"&lt;/span&gt;
      &lt;span class="c"&gt;#======= fix by yaohe end ===========#&lt;/span&gt;

      &lt;span class="nb"&gt;append&lt;/span&gt; entryList &lt;span class="s2"&gt;"\n"&lt;/span&gt; &lt;span class="nv"&gt;$entry&lt;/span&gt;
    &lt;span class="k"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
终于好用了。
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;img src="../../images/emacs_tags_ok.png" class="img-thumbnail" width="60%" &amp;gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
新的tcl代码我备份我的&lt;a href="https://github.com/stephen0921/GenEmacsTagsByVerdi"&gt;github&lt;/a&gt;上，因为实在联系不上作者。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-09-12-emacs-tags-verdi/</guid><pubDate>Tue, 12 Sep 2017 02:35:32 GMT</pubDate></item></channel></rss>