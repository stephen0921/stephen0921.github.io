<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yao He's Awesome Site (Posts about Emacs)</title><link>https://stephen0921.github.io/</link><description></description><atom:link href="https://stephen0921.github.io/categories/cat_emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017 &lt;a href="mailto:stephen0921@gmail.com"&gt;Yao He&lt;/a&gt; </copyright><lastBuildDate>Tue, 31 Oct 2017 12:15:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Emacs column edit</title><link>https://stephen0921.github.io/posts/2017-10-31-emacs-rectangle/</link><dc:creator>Yao He</dc:creator><description>&lt;p&gt;
以前一直觉得emacs的列操作不如vim好用，经过最近一段时间的深入使用，让我的看法有所改变。比如下面的代码我想多加4组agent，那么怎么做呢？
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;agent0 u_agent_0(.clk1(clk),.rst1(rst));
agent1 u_agent_1(.clk1(clk),.rst1(rst));
agent2 u_agent_2(.clk1(clk),.rst1(rst));
agent3 u_agent_3(.clk1(clk),.rst1(rst));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
先copy四行出来。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;agent0 u_agent_0(.clk1(clk),.rst1(rst));
agent1 u_agent_1(.clk1(clk),.rst1(rst));
agent2 u_agent_2(.clk1(clk),.rst1(rst));
agent3 u_agent_3(.clk1(clk),.rst1(rst));

// the 4 lines below are copied from above
agent0 u_agent_0(.clk1(clk),.rst1(rst));
agent1 u_agent_1(.clk1(clk),.rst1(rst));
agent2 u_agent_2(.clk1(clk),.rst1(rst));
agent3 u_agent_3(.clk1(clk),.rst1(rst));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
然后，先选中要修改的4行，然后M-C-%(或者M-x，键入query-replace-regexp, 回车)，在mini-buffer中输入被替换的表达式是
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;-9&lt;span class="o"&gt;]&lt;/span&gt;+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
目标表达式是 
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="se"&gt;\,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;+ &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="se"&gt;\#&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
然后回车，就有一个交互式提示，想要替换掉的，按y，不想替换的按n，如果想全部替换的话，按！,具体命令可以按？来查询。
如图所示。
&lt;/p&gt;

&lt;img src="https://stephen0921.github.io/images/emacs.PNG" class="img-thumbnail" width="60%"&gt;          

&lt;p&gt;
经过4轮的"yynn"后就得到了下面的代码。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;agent0 u_agent_0(.clk1(clk),.rst1(rst));
agent1 u_agent_1(.clk1(clk),.rst1(rst));
agent2 u_agent_2(.clk1(clk),.rst1(rst));
agent3 u_agent_3(.clk1(clk),.rst1(rst));

// the 4 lines below are copied from above, then replace
agent4 u_agent_4(.clk1(clk),.rst1(rst));
agent5 u_agent_5(.clk1(clk),.rst1(rst));
agent6 u_agent_6(.clk1(clk),.rst1(rst));
agent7 u_agent_7(.clk1(clk),.rst1(rst));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
这个过程略显复杂，如果是emacs版本25.2的话，就可以使用(rectangle-mark-mode)来单独选中要改变的列，然后整体替换就ok了。
如下图所示。
&lt;/p&gt;
&lt;img src="https://stephen0921.github.io/images/emacs-rect.PNG" class="img-thumbnail" width="60%"&gt;
&lt;img src="https://stephen0921.github.io/images/emacs-rect-2.PNG" class="img-thumbnail" width="60%"&gt;</description><guid>https://stephen0921.github.io/posts/2017-10-31-emacs-rectangle/</guid><pubDate>Tue, 31 Oct 2017 10:35:32 GMT</pubDate></item><item><title>Generate Tags for Emacs by Verdi</title><link>https://stephen0921.github.io/posts/2017-09-12-emacs-tags-verdi/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Generate Tags for Emacs by Verdi&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
无意中看到SNUG的一个文章，作者通过使用Verdi来生成Emacs以及Vim的tags文件，很棒。我一直没有找到特别好的办法来用Emacs浏览verilog 代码工程，之前也是使用Emacs的插件projectile来grep关键字。我赶紧按照作者的描述操作起来了。
&lt;/p&gt;

&lt;img src="https://stephen0921.github.io/images/tags.png" class="img-thumbnail" width="60%"&gt;

&lt;p&gt;
作者的tcl脚本是放在&lt;a href="https://www.vc-apps.org/sitepages/downloadList.aspx"&gt;这里的&lt;/a&gt; ，居然排在第一个。
&lt;/p&gt;

&lt;img src="https://stephen0921.github.io/images/vcc.PNG" class="img-thumbnail" width="60%"&gt;

&lt;p&gt;
在Verdi打开tcl命令窗口，然后source下载的tcl脚本。
&lt;/p&gt;

&lt;img src="https://stephen0921.github.io/images/verdi.PNG" class="img-thumbnail" width="60%"&gt;

&lt;p&gt;
生成的vim版本的tags文件是ok的，能用。Emacs版本的TAGS文件居然不能跳转！
&lt;/p&gt;

&lt;p&gt;
仔细查了一遍，应该是作者把emacs tags文件的格式弄错了，看来作者一定是vim用户了，或者我使用的emacs版本（25.2）太高了？
&lt;/p&gt;

&lt;p&gt;
再看了一遍论文，作者文字描述的格式和他实际脚本生成的TAGS格式不一致，把tag_definition_text丢掉了，所以跳转有问题。
&lt;/p&gt;

&lt;img src="https://stephen0921.github.io/images/emacs_tags_format.png" class="img-thumbnail" width="60%"&gt;

&lt;p&gt;
去&lt;a href="https://www.vc-apps.org/sitepages/gettingstarted.aspx"&gt;官网&lt;/a&gt;查到了npi参考手册，fix一下tcl代码。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt; tagInfo&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$sorted_ident&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; srcFile &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;lindex&lt;/span&gt; &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="nv"&gt;$tagInfo&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$srcFile&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; tag &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;lindex&lt;/span&gt; &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="nv"&gt;$tagInfo&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; line &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;lindex&lt;/span&gt; &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="nv"&gt;$tagInfo&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; offset &lt;span class="nv"&gt;$byteCounts&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;#======= fix by yaohe begin ===========#&lt;/span&gt;
      &lt;span class="c"&gt;#set entry "\x7f$tag\x01,$offset"&lt;/span&gt;
      &lt;span class="k"&gt;set&lt;/span&gt; file_hdl &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;npi_text_file_by_name&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;name &lt;span class="s2"&gt;"$srcFile"&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;set&lt;/span&gt; line_hdl &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;npi_text_line_by_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;ref &lt;span class="nv"&gt;$file_hdl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;number &lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;set&lt;/span&gt; line_content &lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;npi_text_property_str&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;type npiTextLineContent &lt;span class="o"&gt;-&lt;/span&gt;ref &lt;span class="nv"&gt;$line_hdl&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
      &lt;span class="nb"&gt;regsub&lt;/span&gt; &lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$line_content&lt;/span&gt; &lt;span class="k"&gt;{}&lt;/span&gt; line_content
      &lt;span class="k"&gt;set&lt;/span&gt; entry &lt;span class="s2"&gt;"$line_content\x7f$line,$offset"&lt;/span&gt;
    &lt;span class="c"&gt;#======= fix by yaohe end ===========#&lt;/span&gt;

    &lt;span class="nb"&gt;append&lt;/span&gt; entryList &lt;span class="s2"&gt;"\n"&lt;/span&gt; &lt;span class="nv"&gt;$entry&lt;/span&gt;
  &lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
终于好用了。
&lt;/p&gt;

&lt;img src="https://stephen0921.github.io/images/emacs_tags_ok.png" class="img-thumbnail" width="60%"&gt;

&lt;p&gt;
新的tcl代码我备份我的&lt;a href="https://github.com/stephen0921/GenEmacsTagsByVerdi"&gt;github&lt;/a&gt;上，因为实在联系不上作者。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-09-12-emacs-tags-verdi/</guid><pubDate>Tue, 12 Sep 2017 02:35:32 GMT</pubDate></item><item><title>Emacs verilog mode</title><link>https://stephen0921.github.io/posts/2017-08-30-emacs-verilog/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Emacs的verilog mode&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
是不是觉得verilog的语法，有一些啰嗦呢，实例的例化、信号连接工作太无聊呢？来来来，试试Emacs。
有人说Emacs老土的编辑器了，现在没有人用了吧，还真不是，其强大的扩展性（可折腾性），真是IC验证人的出门在外必备良药啊。
那么在哪里能安装呢？&lt;a href="https://www.gnu.org/software/emacs/download.html"&gt;来这里找&lt;/a&gt; 。
&lt;/p&gt;

&lt;p&gt;
如果是windows版本，需要设置一下环境变量。方法是，控制面板-&amp;gt;系统-&amp;gt;高级系统设置-&amp;gt;环境变量-&amp;gt;新建-&amp;gt;变量名是HOME-&amp;gt;变量值是C:\Users\heyao\documents。
&lt;/p&gt;

&lt;p&gt;
根据自己的需要选择合适的变量值，用来存放用户的.emacs.d文件夹以及.emacs文件，我选择的是C:\Users\heyao\documents。.emacs.d主要是用来放置一下emacs的插件，.emacs是用户自己的初始化设置。
&lt;/p&gt;

&lt;p&gt;
先不折腾这个配置，打开emacs，敲入下面代码:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;module fanout (/*AUTOARG*/)
   input i;
   output [31:0] o;
   wire [31:0] o = {32{i}};
endmodule
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
保存，（快捷键CTRL+x CTRL+s，为了便于说明，用C-x C-s来表示），命名文件为fanout.v。
&lt;/p&gt;

&lt;p&gt;
然后，用户C-c C-a，代码就变成了如下:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;module fanout (/*AUTOARG*/
   // Outputs
   o,
   // Inputs
   i
   )
   input i;
   output [31:0] o;
   wire [31:0] o = {32{i}};
endmodule
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
我们再C-x 3，并排打开窗口，然后C-x C-f，新建一个文件ex_inst.v，如下:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;module ex_inst (/*AUTOARG*/)
   input i;
   output [31:0] o;
   inout      io;

   fanout fanout (/*AUTOINST*/);
endmodule
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
然后，C-c C-a，代码就变成了如下:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;module ex_inst (/*AUTOARG*/
   // Outputs
   o,
   // Inouts
   io,
   // Inputs
   i
   )
   input i;
   output [31:0] o;
   inout      io;

   fanout fanout (/*AUTOINST*/
	  // Outputs
	  .o            (o[31:0]),
	  // Inputs
	  .i            (i));
endmodule
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
可以看到Emacs自动帮忙做了实例化。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-08-30-emacs-verilog/</guid><pubDate>Wed, 30 Aug 2017 09:25:32 GMT</pubDate></item></channel></rss>