<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yao He's Awesome Site (Posts about verification)</title><link>https://stephen0921.github.io/</link><description></description><atom:link href="https://stephen0921.github.io/categories/cat_verification.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017 &lt;a href="mailto:stephen0921@gmail.com"&gt;Yao He&lt;/a&gt; </copyright><lastBuildDate>Sun, 01 Oct 2017 00:11:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Uvm Reporter Mechanism</title><link>https://stephen0921.github.io/posts/2017-08-07-uvm-reporter/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;UVM Reporter Mechanism&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
UVM的log打印分为6个等级，如下图所示:
&lt;/p&gt;
&lt;img src="https://stephen0921.github.io/images/uvm_verbosity.png" class="img-thumbnail" width="60%"&gt;

&lt;p&gt;
由下至上，打印的等级逐级升高。假设在一个task里面有如下的代码，那么即将打印的是后三条。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`uvm_info("ID0", "this is debug message", UVM_DEBUG)
`uvm_info("ID1", "this is full message", UVM_FULL)
`uvm_info("ID2", "this is high message", UVM_HIGH)
`uvm_info("ID3", "this is medium message", UVM_MEDIUM)
`uvm_info("ID4", "this is low message", UVM_LOW)
`uvm_info("ID5", "this is none message", UVM_NONE)
&lt;/pre&gt;&lt;/div&gt;

&lt;img src="https://stephen0921.github.io/images/uvm_log.png" class="img-thumbnail" width="60%"&gt;

&lt;p&gt;
因为仿真器默认的verbosity是UVM_MEDIUM，所以ID0~ID2的信息没有打印出来。可以通过命令行来修改打印的verbosity，比如:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+uvm_set_verbosity&lt;span class="o"&gt;=&lt;/span&gt;component_name,id,verbosity,phase_name,optional_time
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
`uvm_warning、`uvm_error、`uvm_fatal可以看作是verbosity都是UVM_NONE的`uvm_info，所以它们是默认打印的。但是它们的行为可以通过命令行改变，比如默认的`uvm_fatal是要立刻停止仿真的，但是可以通过+uvm_set_action来改变它。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+uvm_set_action&lt;span class="o"&gt;=&lt;/span&gt;component,id,severity,action
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
这里可以做简单的练习:
&lt;a href="http://www.edaplayground.com/x/5xF7"&gt;my simple test&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-08-07-uvm-reporter/</guid><pubDate>Mon, 07 Aug 2017 07:34:50 GMT</pubDate></item><item><title>Uvm Factory Mechanism</title><link>https://stephen0921.github.io/posts/2017-08-07-uvm-factory/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;UVM的Factory机制&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
验证环境要具有比较好的通用性，以及适应性。比如某一种情况下，需要我们发的transaction的某一些位域发生改变，或者dut接口上一些特定行为需要我们改变driver。UVM的factory机制为我们处理这些情况，提供了非常方便的方法。
典型的验证环境是这样的:
&lt;/p&gt;
&lt;img src="https://stephen0921.github.io/images/uvm_env.png" class="img-thumbnail" width="60%"&gt;
&lt;p&gt;
很可能我们想要把发的transaction变成bad_transaction，那么我们就要重写一个bad_sequence，然后再写一个bad_driver，test也要重写。下面的代码请感受一下:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class bad_transaction extends transaction;
  bit bad;

function new(string name);
  super.new(name);
  bad = 1;
endfunction

endclass

class bad_sequence extends sequence;
  bad_transaction m_bad_transaction;
function new(string name);
  super.new(name);
  m_bad_transaction = bad_transaction::new("m_bad_transaction"); 
endfunction


endclass

class bad_driver extends driver;
bad_transaction m_bad_transaction;
...
endclass
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Factory机制是指，UVM从两张表里寻找用户注册的信息，然后在实例化具体的组件时做判断到底实例化哪一个class的组件，优先从override注册表里找，然后是class类型注册表。
&lt;/p&gt;
&lt;img src="https://stephen0921.github.io/images/uvm_factory.png" class="img-thumbnail" width="60%"&gt;

&lt;p&gt;
这样，如果是irun，我们只需要在仿真时的tcl里做override，就可以最大程度的复用之前的代码。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;uvm_factory&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;override &lt;span class="o"&gt;-&lt;/span&gt;by_type transaction bad_transaction 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
当然，需要我们对我们的原始代码做小的调整。`uvm_object_utils帮助我们完成class在factory中的注册，这样在整个test中，其实例化的包是bad_transaction。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class transaction extends uvm_sequence_item;
  `uvm_object_utils(transaction)
  ...
endclass

class bad_transaction extends transaction;
  `uvm_object_utils(bad_transaction)
  bit bad;

function new(string name);
  super.new(name);
  bad = 1;
endfunction

endclass

class sequence extends uvm_sequence;
  transaction m_transaction;
function new(string name);
  super.new(name);
  m_transaction = transaction::type_id::create("m_transaction");
endfunction

endclass
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-08-07-uvm-factory/</guid><pubDate>Mon, 07 Aug 2017 02:56:38 GMT</pubDate></item><item><title>Indirect Register Access</title><link>https://stephen0921.github.io/posts/2017-08-04-indirect-register-access/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;序&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
UVM register model为我们的寄存器验证提供了很大的帮助，多种集成register model的方法，尤其是使用layered register sequencer的方法，方便了间接访问寄存器的验证。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;uvm_users_guide_1.1的例子分析&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
参考第5.9.2.3小节，
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;
&lt;span class="n"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;uvm_reg_sequence&lt;/span&gt; &lt;span class="c1"&gt;#(uvm_sequence #(apb_rw)) reg2apb_seq_t;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;block_env&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;uvm_env&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;block_reg_model&lt;/span&gt; &lt;span class="n"&gt;regmodel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;uvm_sequencer&lt;/span&gt;&lt;span class="c1"&gt;#(uvm_reg_item) reg_seqr;&lt;/span&gt;
  &lt;span class="n"&gt;apb_agent&lt;/span&gt; &lt;span class="n"&gt;apb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;reg2apb_seq_t&lt;/span&gt; &lt;span class="n"&gt;reg2apb_seq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regmodel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;
      &lt;span class="n"&gt;regmodel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_sequencer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg_seqr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;reg2apb_seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reg2apb_seq_t&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"reg2apb_seq"&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;get_full_name&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="n"&gt;reg2apb_seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reg_seqr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reg_seqr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;reg2apb_seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;reg2apb_adapter&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"reg2apb"&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;get_full_name&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="n"&gt;regmodel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_auto_predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;endfunction&lt;/span&gt;

  &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;reg2apb_seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sequencer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;endtask&lt;/span&gt;
&lt;span class="n"&gt;endclass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
中间层sequencer上的sequence item类型是uvm_reg_item，也即是寄存器的读或者写操作了，其是class。
在test里，start translation sequence。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;my_test&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;uvm_test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;block_env&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;my_reg_sequence&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_reg_sequence&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"seq"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reg_seqr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;endfunction&lt;/span&gt;
&lt;span class="n"&gt;endclass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;实际问题&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
在我的实际应用中，是想把一个寄存器操作，转化为多个寄存器的读和写。这里，我把间接寄存器放在了一个独立的register map上(名为UnAddressedModules)，而不是default map。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;wifi_t&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;uvm_reg_block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;uvm_reg_map&lt;/span&gt; &lt;span class="n"&gt;wifi_top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;uvm_reg_map&lt;/span&gt; &lt;span class="n"&gt;UnAddressedModules&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;wifi_top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"wifi_top"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'h0, 4, UVM_LITTLE_ENDIAN, 1);&lt;/span&gt;
    &lt;span class="n"&gt;UnAddressedModules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UnAddressedModules"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'h0, 4, UVM_LITTLE_ENDIAN, 1);&lt;/span&gt;
    &lt;span class="n"&gt;default_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wifi_top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    
&lt;span class="n"&gt;endclass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
在env中，集成register model以及构建layer sequence。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;build_phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uvm_phase&lt;/span&gt; &lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;reg_seqr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uvm_sequencer&lt;/span&gt;&lt;span class="c1"&gt;#(uvm_reg_item)::type_id::create("reg_seqr", this);&lt;/span&gt;

    &lt;span class="n"&gt;rdb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wifi_t&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"rdb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;rdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;rdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock_model&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;endfunction&lt;/span&gt;

  &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;connect_phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uvm_phase&lt;/span&gt; &lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect_phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;vsequencer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ahb_master_sqr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ahb_master_uvc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sequencer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;vsequencer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reg_seqr&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reg_seqr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;rdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_sequencer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vsequencer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ahb_master_sqr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg2ahb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_auto_predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;rdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnAddressedModules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_sequencer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg_seqr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;note&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;
    &lt;span class="n"&gt;rdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnAddressedModules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_auto_predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;reg_tl_seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reg_tl_seq_t&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"reg_tl_seq"&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;get_full_name&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;req_tl_seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reg_seqr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reg_seqr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;upstream&lt;/span&gt; &lt;span class="n"&gt;sequencer&lt;/span&gt;
    &lt;span class="n"&gt;req_tl_seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rdb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;req_tl_seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reg2ahb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;reg_tl_seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phy_bank_cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env_cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phy_bank_cfg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;endfunction&lt;/span&gt;

  &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="n"&gt;main_phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uvm_phase&lt;/span&gt; &lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main_phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;env_cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;reg_tl_seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vsequncer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ahb_master_sqr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;endtask&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
回过头来，参考uvm_reg_sequence.svh。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;forever&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;
      &lt;span class="n"&gt;uvm_reg_item&lt;/span&gt; &lt;span class="n"&gt;reg_item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;reg_seqr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg_item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;do_reg_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg_item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;reg_seqr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg_item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;#0;&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;endtask&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
所以，我自己的sequence为下面的代码，因为不是uvm_reg_sequence的子类，所以需要手动实现上面body类似代码。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;forever&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;
    &lt;span class="n"&gt;uvm_reg_item&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;reg_seqr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;select_bank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;UVM_READ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;
      &lt;span class="n"&gt;read_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;
      &lt;span class="n"&gt;write_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;reg_seqr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;#0;&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_tr&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
注意，reg_seqr没有对应的driver与之相连，所以要手动end_tr，否则sequence在发出第一个包后，卡住不动，因为没有consume掉这个transaction。可以参考代码uvm_reg_map.svh。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="n"&gt;uvm_reg_map&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;do_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uvm_reg_item&lt;/span&gt; &lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prior&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finish_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_on&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt; &lt;span class="n"&gt;rw&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;consumed&lt;/span&gt;
&lt;span class="n"&gt;endtask&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;总结&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
层次化的集成register model的方法，处理间接访问寄存器，可行有效，但要注意一些小细节，比如关于transaction生命周期的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-08-04-indirect-register-access/</guid><pubDate>Fri, 04 Aug 2017 10:17:15 GMT</pubDate></item><item><title>irun MSIE tips</title><link>https://stephen0921.github.io/posts/2017-08-01-irun-msie/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;irun MSIE&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
前一阵子折腾MSIE的验证环境，现在环境比较稳定了，也是时候来总结一下了。
&lt;/p&gt;

&lt;p&gt;
MSIE的全称是Multi-Snapshot Incremental Elaboration，是cadence的irun工具的一个feature。使用这个feature可以节约仿真的编译时间，其本质就是把一些子模块编译好，顶层编译的时候直接把编译好的子模块的database拿过来，节省了elaboration的时间。
&lt;/p&gt;

&lt;p&gt;
举一个例子，比如下面的一个验证环境。
&lt;/p&gt;

&lt;img src="https://stephen0921.github.io/images/msie.png" class="img-thumbnail" width="60%"&gt;


&lt;p&gt;
其中，相对稳定基本不变的部分是cpu，其他的比如dut和tb_top会经常改变。那么cpu部分就可以提前编译好，作为一个database，官方叫法是primary snapshot。"挖掉"cpu的dut也可以作为一个primary snapshot。
&lt;/p&gt;

&lt;p&gt;
具体的irun命令是:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;cpu_compile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
	irun &lt;span class="k"&gt;$(&lt;/span&gt;MSIE_PRIM_OPT&lt;span class="k"&gt;)&lt;/span&gt; -top cpu -name cpu -f cpu.f -nclibdirname &lt;span class="k"&gt;$(&lt;/span&gt;WORKDIR&lt;span class="k"&gt;)&lt;/span&gt;/cpu -l cpu_compile.log -incrpath tb_top.u_dut.u_cpu

&lt;span class="nf"&gt;dut_compile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
	irun &lt;span class="k"&gt;$(&lt;/span&gt;MSIE_PRIM_OPT&lt;span class="k"&gt;)&lt;/span&gt; -top dut -name dut -f dut_no_cpu.f -nclibdirname &lt;span class="k"&gt;$(&lt;/span&gt;WORKDIR&lt;span class="k"&gt;)&lt;/span&gt;/dut_no_cpu -l dut_compile.log -incrbind cpu -incrpath tb_top.u_dut

&lt;span class="nf"&gt;tb_compile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
	irun &lt;span class="k"&gt;$(&lt;/span&gt;MSIE_INCR_OPT&lt;span class="k"&gt;)&lt;/span&gt; -top tb_top -f tb_top_no_dut.f  -l tb_compile.log -primname dut@&lt;span class="k"&gt;$(&lt;/span&gt;WORKDIR&lt;span class="k"&gt;)&lt;/span&gt;/dut_no_cpu -primname cpu@&lt;span class="k"&gt;$(&lt;/span&gt;WORKDIR&lt;span class="k"&gt;)&lt;/span&gt;/cpu
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
如果是后仿，还要做sdf反标，就要在compile每一个primary snapshot的时候把sdf文件吃进去，option是-sdf_cmd_file xx.cmd。sdf的拆分需要根据partition情况使用工具ncsdfc来完成。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/2017-08-01-irun-msie/</guid><pubDate>Tue, 01 Aug 2017 04:56:41 GMT</pubDate></item><item><title>OOP in Systemverilog</title><link>https://stephen0921.github.io/posts/sv-oop/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;system verilog中的面向对象&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
下面的代码中，bad_tr继承tr，所以bad_tr具有了成员变量num和good的同时，也有自己的变量bad。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class tr;
   bit num;
   bit good;

   function new();
      num = 0;
      good = 0;
   endfunction // new

endclass // tr

class bad_tr extends tr;
   bit bad;

   function new();
      super.new();
      bad = 1;
   endfunction // new

endclass // bad_tr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
下面的代码，在initial块中create了两个对象，分别是m_tr和m_bad_tr，并且m_tr指向了其子类对象m_bad_tr。当想做downcast时，也就是说比如让m_bad_tr1指向tr的子类时，要用$cast函数。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tr     m_tr;
bad_tr m_bad_tr;

bad_tr m_bad_tr1;

initial begin
   m_tr = new();
   m_bad_tr = new();
   m_tr = m_bad_tr;

   if ($cast(m_bad_tr1, m_tr))
     $display("Successful!");
   else
     $display("Can not assign!");

end
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/sv-oop/</guid><pubDate>Tue, 27 Jun 2017 17:19:39 GMT</pubDate></item><item><title>Why we use p_sequencer in UVM?</title><link>https://stephen0921.github.io/posts/uvm-summary-mpseqr/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;p_sequencer&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
经常会看到在sequence和virtual sequence中，使用了宏`uvm_declare_p_sequencer。那么，为什么我们要使用p_sequencer呢？
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class base_vseq extends uvm_sequence;
  function new(string name="base_vseq");
    super.new(name);
  endfunction

  `uvm_object_utils(base_vseq)
  `uvm_declare_p_sequencer(uart_ctrl_virtual_sequencer)
 endclass
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
从继承的关系上，uvm_sequence_item-&amp;gt;uvm_sequence_base-&amp;gt;uvm_sequence，uvm_sequence_item中有一个成员变量m_sequencer（喂喂喂，怎么说m_sequencer了？嗯嗯，别急，往后看），当我们在test的run_phase中start一个sequence的时候，其实就是给m_sequencer赋值了，把我们环境的sequencer赋给m_sequencer。m_sequencer是不带parameter的。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class uvm_sequence_item extends uvm_transaction;

  local      int                m_sequence_id = -1;
  protected  bit                m_use_sequence_info;
  protected  int                m_depth = -1;

  protected  uvm_sequencer_base m_sequencer;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
把宏`uvm_declare_p_sequencer展开看，就是把m_sequencer赋值给了p_sequencer，当然了，m_sequncer所指向的对象，一定要是p_sequencer或者p_sequencer的子类，否者cast函数会报错的。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`define uvm_declare_p_sequencer(SEQUENCER) \
  SEQUENCER p_sequencer;\
  virtual function void m_set_p_sequencer();\
    super.m_set_p_sequencer(); \
    if( !$cast(p_sequencer, m_sequencer)) \
	`uvm_fatal("DCLPSQ", \
	$sformatf("%m %s Error casting p_sequencer, please verify that this sequence/sequence item is intended to execute on this type of sequencer", get_full_name())) \
  endfunction 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
那么，费了这么多事，要做什么呢？其实就是传递配置。因为sequence和component不一样，component是在build_phase环节就有了，而sequence是在run_phase阶段才会第一次出现，sequence想要去从环境上拿到配置信息，一定要通过它的m_sequencer，但是m_sequencer是不带parameter的，和我们start的时候一定不match，所以UVM就事先在定义sequence的时候，把p_sequencer这个带parameter的sequencer准备好，方便后面的使用。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtual task body();
      response_queue_error_report_disabled = 1;
      start_addr = `TX_FIFO_REG;
      while (num_of_wr) begin
	`uvm_info(get_type_name(), $sformatf("Starting %0d Writes...", num_of_wr), UVM_LOW)
	for (int i = 0; i &amp;lt; num_of_wr; i++) begin
	  if (p_sequencer.tful) begin
	    num_of_wr -= i;
	    `uvm_info("UART_APB_SEQLIB", $sformatf("Breaking from apb_to_uart_wr since tfifo is not empty yet, pending num_of_wr = %d", num_of_wr), UVM_LOW)
	    #10000;
	    break;
	  end
	  `uvm_do_with(req, 
	    { req.addr == start_addr;
	      req.direction == APB_WRITE;
	      req.delay == del; } )
	  #200;
	  if (i == num_of_wr - 1)
	     num_of_wr = 0;
	end
      end
    endtask
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
上面这段代码就是sequence的片段，可以看到直接访问了p_sequencer的变量tful，如果写成m_sequencer.tful，是一定不成的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/uvm-summary-mpseqr/</guid><pubDate>Mon, 19 Jun 2017 17:19:02 GMT</pubDate></item><item><title>Study UVM Source Code with Sublime3</title><link>https://stephen0921.github.io/posts/uvm-source-code-editor/</link><dc:creator>Yao He</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;UVM和Sublime3&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
学习UVM的很好的一个方法是读源码，去网上下载&lt;a href="http://www.accellera.org/downloads/standards/uvm"&gt;UVM&lt;/a&gt; 源码，然后就可以了。
很多主流的编辑器，对systemverilog的支持都很一般，我这里推荐使用 &lt;a href="http://www.sublimetext.com/3"&gt;sublime3&lt;/a&gt;。
但是首先需要安装一个插件管理器 &lt;a href="https://packagecontrol.io/"&gt;packagecontrol&lt;/a&gt; 。
之后，ctrol+shift+p，选择命令PackageControl:install package，搜索关键字systemverilog，安装好后，就大功告成了。
打开sublime3，然后在菜单栏里选择File-&amp;gt;open folder，打开UVM的源码目录，好了开工。
&lt;/p&gt;

&lt;img src="https://stephen0921.github.io/images/uvm_driver.png" class="img-thumbnail" width="60%"&gt;

&lt;p&gt;
比如我看到下面这行代码，想看看uvm component的定义，那就在uvm component的位置上按F12。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class uvm_driver #(type REQ=uvm_sequence_item,
		     type RSP=REQ) extends uvm_component;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
我们就能找到它的位置了，如下图所示。
&lt;/p&gt;

&lt;img src="https://stephen0921.github.io/images/uvm_comp.png" class="img-thumbnail" width="60%"&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://stephen0921.github.io/posts/uvm-source-code-editor/</guid><pubDate>Thu, 15 Jun 2017 17:17:25 GMT</pubDate></item></channel></rss>