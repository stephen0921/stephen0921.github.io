#+OPTIONS: ^:nil
#+BEGIN_COMMENT
.. title: Perl Overview
.. slug: 2017-04-02-perl-overview
.. date: 2017-04-02 18:35:15 UTC+08:00
.. tag: 
.. category: perl
.. link:
.. description:
.. type: text
#+END_COMMENT

* Perl coding tips

** 打开pipe或者访问文件的时候，最好使用die

#+BEGIN_SRC perl
open FILE, "a_file" or die "Can not open file a_file: $!";
close FILE;
#+END_SRC

** 比die更好用的是croak

#+BEGIN_SRC perl
use Carp;
a("a_file"); #resume that a_file does exist
a("b_file"); #resume that b_file does not exist
sub a {
      my $filename = shift;
      open FILE, "$filename" or croak "Can not open file $filename: $!";
      return 0;
}
#+END_SRC

** 用dumper来print复杂的数据结构，便于debug

#+BEGIN_SRC perl
use Data::Dumper;

$var = {"name" => "hello", "action" => "speak" };
print Dumper($var);
#+END_SRC

** 用grep和map可以节省很多代码

#+BEGIN_SRC perl
my @foos = grep {!/^#/} @bars;    # weed out comments

my %hash = map {  lc($_) => 1  } @array

my @squares = map { $_ * $_ } grep { $_ > 5 } @numbers;
#+END_SRC

** 使用qq代替双引号，使用q代替单引号，list赋值使用qw
#+BEGIN_SRC perl
$a = qq{"}; #{} is used for boundary
$b = qq!"!; #!! is the same

$c = q{'};
@vars = qw{a b c};
#+END_SRC


** 使用list的内置函数，不要重新发明轮子
#+BEGIN_SRC perl
use List::Util qw(max);

my @vars = qw(1 2 3);
my $result = max(@vars);
#+END_SRC

** 打印多行的信息
#+BEGIN_SRC perl
$a = "hello";
print <<ENDOFPRINT;
Dear Lee,
    blablabla...
    $a
ENDOFPRINT

$b = <<ENDOFA;
Dear friend,
   I am here.
ENDOFA
#+END_SRC

** 只想做语法检查
#+BEGIN_SRC sh
perl -cwT test.pl
#+END_SRC

** 查看Perl默认的include路径
#+BEGIN_SRC sh
perl -e "print join(qq{\n}, @INC);"
#+END_SRC


** 使用自己的local路径下的库
#+BEGIN_SRC perl
use lib '/home/xx/eda_scripts/pm';
#+END_SRC

** 查看perl的pod格式的说明
#+BEGIN_SRC sh
perldoc rvp.pm
perldoc perldoc
#+END_SRC

** Perl5.8之后的版本，可以在数据中间加下划线
#+BEGIN_SRC perl
$a = 111_222;
print "a = ", $a , "\n";
#+END_SRC

** 调用其他shell命令，同时获得shell命令的STDERR以及STDOUT信息
#+BEGIN_SRC perl
$pid = open $readme, "-|", "$cmd 2>&1";
while (<$readme>) {
    push(@out, $_);
}
close $readme;
#+END_SRC


** Perl使用子线程，获得子线程的STDERR信息
#+BEGIN_SRC perl
pipe(READER, WRITER) or die "pipe no good: $!";
my $pid = fork();
die "Can no fork: $!" unless defined $pid;
if($pid) { #parent process
    close WRITER;
    while(<READER>) {
        push @out, $_;
    }    
}
else { #child process
    close READER;
    open STDERR, ">&WRITER";
    $parser = XML::LibXML->new;
    $parser->validation(1);
    exit 0;
}
#+END_SRC

** 多线程

*** 因为fork是复制出一个完全一样的进程，所以“go on”会被print 2 次。
 #+BEGIN_SRC perl
  my $pid = fork();
  if($pid) {
      #parent
      print "in parent\n";
  }
  else {
      #child
      print "in child\n";
  }
  print "go on\n";
 #+END_SRC

*** child process中途退出了，所以 “go on”只被print 1次
 #+BEGIN_SRC perl
  my $pid = fork();
  if($pid) {
      #parent
      print "in parent\n";
  }
  else {
      #child
      print "in child\n";
      exit;
  }
  print "go on\n";
 #+END_SRC

*** child process通过exec，替换掉当前process，所以 “never print this”不会被print
  #+BEGIN_SRC perl
  my $pid = fork();

  if($pid) {
      #parent
      print "in parent\n";
  }
  else {
      #child
      print "in child\n";
      exec("ls");
      print "never print this.\n";
  }
  print "go on\n";
  #+END_SRC

*** eval{}是一种保护性写法。eval的运行结果放在$@里。可以结合alarm handler来完成很多应用
  #+BEGIN_SRC perl
  print STDERR "type your password: ";
  my $password =
  eval {
  local $SIG{ALRM} = sub { die "timeout\n" };
  alarm (5); # five second timeout
  return <STDIN>;
  };
  alarm (0);
  print STDERR "you timed out\n" if $@ =~ /timeout/;
  #+END_SRC

*** reaper函数，非阻塞式（WNOHANG）的处理所有子进程，$kid等于-1的时候，表示没有需要回收的进程，跳出reaper函数
  #+BEGIN_SRC perl
  use POSIX 'WNOHANG';
  $SIG{CHLD} = \&reaper;
  sub reaper {
      while ((my $kid = waitpid(-1,WNOHANG)) > 0) {
      warn "Reaped child with PID $kid\n";
      }
  }
  #+END_SRC

** reference
 类似c语言的指针

 #+BEGIN_SRC perl
 @vars = ();
 $vars_ref = \@vars;

 $a_href = {};
 $b_href = { "name" => "b", "action" => "speak", };
 $c_href = {%{$b_href}};


 $tmp = "name";
 print $c_href->{$tmp}, "\n"; #This is called a symbolic reference
 #+END_SRC

** 安装module
 #+BEGIN_SRC sh
 cpan install Template
 cpan install XML::Rabbit
 #+END_SRC

** 好用的module

 [[http://template-toolkit.org/docs/][Template Toolkit]]

 [[http://search.cpan.org/~shlomif/XML-LibXML-2.0125/LibXML.pod][XML::LibXML]]


 [[http://search.cpan.org/~robins/XML-Rabbit-0.4.1/lib/XML/Rabbit.pm][XML::Rabbit]]

 [[http://www.burbleland.com/v2html/rvp.html][rvp]]

 [[http://search.cpan.org/~neilb/Smart-Comments-1.06/lib/Smart/Comments.pm][Smart::Comments]]

 [[http://search.cpan.org/~ether/Moose-2.1802/lib/Moose.pm][Moose]]


** Perl 在验证中的应用

[[http://www.doulos.com/content/events/easierUVM.php][easier UVM]]

** Perl 参考网站
 [[http://perldoc.perl.org/][perldoc]]

 [[http://search.cpan.org/][cpan]]

